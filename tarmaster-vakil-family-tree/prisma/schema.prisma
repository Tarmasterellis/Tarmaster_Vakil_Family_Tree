// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id            String    @id @default(cuid())
	name          String?
	email         String?   @unique
	emailVerified DateTime?
	image         String?
	accounts      Account[]
	sessions      Session[]

	familyMembers FamilyNode[] @relation("UserCreatedMembers")
}

model Account {
	id                String  @id @default(cuid())
	userId            String
	type              String
	provider          String
	providerAccountId String
	refresh_token     String?
	access_token      String?
	expires_at        Int?
	token_type        String?
	scope             String?
	id_token          String?
	session_state     String?

	user User @relation(fields: [userId], references: [id])

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime

	user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

model FamilyNode {
	id        String   @id @default(cuid())
	parentId  String?  // To track hierarchy
	data      Json     // Stores: first name, last name, birthday, avatar, gender
	rels      Json     // Stores: spouses[], children[]
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	createdBy   User   @relation("UserCreatedMembers", fields: [createdById], references: [id])
	createdById String
}